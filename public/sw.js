// Set this to true for production
var doCache = false;
console.log('SWWWW');
// Name our cache
var CACHE_NAME = 'my-pwa-cache-v1';

const urlB64ToUint8Array = base64String => {
  const padding = '='.repeat((4 - (base64String.length % 4)) % 4)
  const base64 = (base64String + padding).replace(/\-/g, '+').replace(/_/g, '/')
  const rawData = atob(base64)
  const outputArray = new Uint8Array(rawData.length)
  for (let i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i)
  }
  return outputArray
}

// Delete old caches that are not our current one!
self.addEventListener("activate", async () => {
  try {
    const applicationServerKey = urlB64ToUint8Array(
      'BHP3NTadvyjrf-v8KSTsoZDNpPA1nELgrqyBYQKciRfn1Mu9PZ3nstPDACLu2eHfJDueWtbAvMMvJSZ7oNkoUrE'
    )
    const options = { applicationServerKey, userVisibleOnly: true }
    const subscription = await self.registration.pushManager.subscribe(options)
    const response = await saveSubscription(subscription)
    console.log(response)
  } catch (err) {
    console.log('Error', err)
  }
});

self.addEventListener('notificationclick', function (event) {
  console.log('notifclick!!!!!!')
  const clickedNotification = event.notification;
  console.log('clickedNotification', clickedNotification);
  clickedNotification.close();
  event.waitUntil(
    clients.matchAll({
      type: 'window'
    })
      .then(function (clientList) {
        var url = event.notification.data;
        for (var i = 0; i < clientList.length; i++) {
          var client = clientList[i];
          if (client.url == url && 'focus' in client)
            return client.focus();
        }
        if (clients.openWindow) {
          return clients.openWindow(url);
        }
      })
  );
});

const showLocalNotification = (title, body, swRegistration) => {
  const options = {
    body,
  };
  swRegistration.showNotification(title, options);
}

self.addEventListener('push', function (event) {
  if (event.data) {
    console.log('Push event!! ', event.data.text());
    showLocalNotification('Yolo', event.data.text(), self.registration)
  } else {
    console.log('Push event but no data')
  }
})


const saveSubscription = async subscription => {
  const SERVER_URL = 'http://192.168.1.201:4000/save-subscription'
  const response = await fetch(SERVER_URL, {
    method: 'post',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(subscription),
  })
  return response.json()
}

// The first time the user starts up the PWA, 'install' is triggered.
self.addEventListener('install', function (event) {
  console.log('install');
  if (doCache) {
    event.waitUntil(
      caches.open(CACHE_NAME)
        .then(function (cache) {
          // Get the assets manifest so we can see what our js file is named
          // This is because webpack hashes it
          fetch("asset-manifest.json")
            .then(response => {
              response.json()
            })
            .then(assets => {
              // Open a cache and cache our files
              // We want to cache the page and the main.js generated by webpack
              // We could also cache any static assets like CSS or images
              const urlsToCache = [
                "/",
                assets["main.js"]
              ]
              cache.addAll(urlsToCache)
              console.log('cached');
            })
        })
    );
  }
});

// When the webpage goes to fetch files, we intercept that request and serve up the matching files
// if we have them
self.addEventListener('fetch', function (event) {
  if (doCache) {
    event.respondWith(
      caches.match(event.request).then(function (response) {
        return response || fetch(event.request);
      })
    );
  }
});