// (function (window) {
//   function myServiceWorker() {
//     const _serviceWorker = {};
//     _serviceWorker.activateSubscription = self.addEventListener("activate", async () => {
//       try {
//         const applicationServerKey = urlB64ToUint8Array(
//           'BHP3NTadvyjrf-v8KSTsoZDNpPA1nELgrqyBYQKciRfn1Mu9PZ3nstPDACLu2eHfJDueWtbAvMMvJSZ7oNkoUrE'
//         )
//         const options = { applicationServerKey, userVisibleOnly: true }
//         const subscription = await self.registration.pushManager.subscribe(options)
//         const response = await saveSubscription(subscription)
//         console.log(response)
//       } catch (err) {
//         console.log('Error', err)
//       }
//     });
//     _serviceWorker.installServiceWorker = self.addEventListener('install', function (event) {
//       console.log('install');
//       if (doCache) {
//         event.waitUntil(
//           caches.open(CACHE_NAME)
//             .then(function (cache) {
//               // Get the assets manifest so we can see what our js file is named
//               // This is because webpack hashes it
//               fetch("asset-manifest.json")
//                 .then(response => {
//                   response.json()
//                 })
//                 .then(assets => {
//                   // Open a cache and cache our files
//                   // We want to cache the page and the main.js generated by webpack
//                   // We could also cache any static assets like CSS or images
//                   const urlsToCache = [
//                     "/",
//                     assets["main.js"]
//                   ]
//                   cache.addAll(urlsToCache)
//                   console.log('cached');
//                 })
//             })
//         );
//       }
//     });
//     return _serviceWorker;
//   }
//   if (typeof (window.myWindowGlobalLibraryName) === 'undefined') {
//     window.myWindowGlobalLibraryName = myServiceWorker();
//   }
// })(window)

// myWindowGlobalLibraryName.activateSubscription();
// myWindowGlobalLibraryName.installServiceWorker();